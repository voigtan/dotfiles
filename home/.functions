#!/usr/bin/env bash

# Determine size of a file or total size of a directory
# Usage: fs [path]
# If a path is provided, it will display the size of the specified file or directory.
# If no path is provided, it will display the size of all files and directories in the current directory.
fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Launch lazygit and change directory if a new directory is specified
# Usage: lg [options]
# Runs lazygit with the provided options. If a new directory is specified in ~/.lazygit/newdir, it changes to that directory.
lg()
{
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir
    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
        cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
        rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
    fi
}

# Show git diff with bat highlighting
# Usage: batdiff
# Displays the names of files changed in the git diff with syntax highlighting using bat.
batdiff() {
    git diff --name-only --diff-filter=d | xargs bat --diff
}

# Interact with a running Docker container
# Usage: dockerInteract <container_id>
# Opens an interactive shell session inside the specified Docker container.
dockerInteract() {
    docker exec -it $1 sh
}

# Display gzip compression ratio of a file or a string
# Usage: gz <file|string>
# If no arguments are provided, it reads from stdin.
# If a file is specified, shows the original size and the gzip compressed size of the file, along with the compression ratio.
# If a string is specified, shows the original size and the gzip compressed size of the string, along with the compression ratio.
gz() {
    local input
    if [ -t 0 ]; then # Check if input is from a terminal
        if [ -f "$1" ]; then # Check if the first argument is a file, use the file as input
            input="$1"
        else # if the first argument is not a file, treat it as a string
            input=$(mktemp)
            printf "%s" "$*" > "$input"
        fi
    else # if input is from a pipe read from stdin and write to the temporary file
        input=$(mktemp) 
        cat > "$input"
    fi

    local origsize=$(wc -c < "$input")
    local gzipsize=$(gzip -c < "$input" | wc -c)
    local ratio=$(echo "scale=2; $gzipsize * 100 / $origsize" | bc -l 2>/dev/null)
    printf "orig: %d bytes\n" "$origsize"
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"

    [[ "$input" == /tmp/* ]] && rm -f "$input" # Clean up temporary file
}

# Remove node_modules directories
# Usage: npmRemove [-dry]
# If the -dry option is provided, it displays the sizes of all node_modules directories.
# Otherwise, it removes all node_modules directories in the current directory and its subdirectories.
npmRemove() {
    if [ "$1" = "-dry" ]; then
        find . -name "node_modules" -type d -prune -exec du -chs {} +
    else
        find . -name "node_modules" -type d -prune -exec rm -rf {} +
    fi
}

# Generate a random password of a specified length using GPG
# Usage: pw [length]
# Generates a random password of the specified length. Defaults to 24 if no length is specified.
pw() {
    local length=${1:-24}
    gpg --gen-random --armor 1 "$length"
}
