[alias]
	his = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	ulog = log --graph --abbrev-commit --decorate --date=relative --all
	s = status -sb
	l = log
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	lg-ascii = "log --color --graph --pretty=format:'%C(#dc322f)%h%C(#ffff00)%d %C(#eee8d5)%s %C(#dc322f)| %C(#586f75)%cr %C(#dc322f)| %C(#586e75)%an%Creset' --abbrev-commit"
	lgg = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%C(blue)%x20(%ce)%x20%C(cyan)[gpg:%GK%x20%G?]%C(reset)%x20-%x20%an%n%x20%s%n"
	# Show the user email for the current repository.
	whoami = config user.email
	lg-stat = "log --pretty=format:'%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]' --decorate --stat"
	del = branch -D
	br = branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate

	# Display the largest files in the repository using `git log-largefiles`.
	# Set the number of files to display by providing the value of x (default is 5).
	log-largefiles = "!f() { \
		git rev-list --objects --all \
		| git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
		| sed -n 's/^blob //p' \
		| sort --numeric-sort --key=2 \
		| tail -n ${1-5} \
		| cut -c 1-12,41- \
		| $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest; \
	}; f"

	log-file = "log -p -- $1"

	log-highscore = "!git shortlog -e --summary --numbered --format='%an (%ae)' \
		| sed -Ee 's/^[[:blank:]]*//g' \
		| bat -l bash --style=numbers,header,grid --file-name '⭐ Highscore ⭐' --tabs=2"

	# list all aliases in the current repository
	aliases = !git config -l | grep alias | cut -c 7-

	# Save all changes to the stash, including untracked files.
	# If a message is provided, it will be used as the stash message.
	# Usage: git save [optional message]
	save = "!f() { if [ -z \"$1\" ];then git stash --keep-index --include-untracked; else git stash push -m \"$1\" --keep-index --include-untracked ; fi; }; f"

	fixup =! sh -c 'SHA =$git rev-parse $1) \
		&& git commit --fixup $SHA \
		&& git rebase -i --autosquash $SHA~ '-
	
	branches = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes

	# Lists branches ordered by the latest changes, allows selection with fzf, and checks out the selected branch.
	#
	# Usage:
	#   git recent
	#
	# Description:
	#   This command displays all local branches sorted by the most recent commit date.
	#   It uses `fzf` to allow interactive selection of a branch, and then checks out the selected branch.
	#
	# Example:
	#   `git recent` - Opens an interactive list of branches for selection and switches to the chosen branch.
	recent = "!git for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always | column -ts'|' | fzf --ansi | awk '{print $1}' | xargs git switch"

	# Creates a new branch with the name `wip/fire/$USER-<timestamp>` and pushes it to the remote repository.
	#
	# Usage:
	#   git fire
	#
	# Description:
	#   This command is a "panic button" for quickly saving your work. It stages all changes, commits them with a "WIP: fire alarm!" message, 
	#   and pushes the changes to a new branch named `wip/fire/$USER-<timestamp>` on the remote repository.
	#
	# Example:
	#   `git fire` - Creates a branch like `wip/fire/username-1234567890`, stages all changes, 
	fire = "!f() { \
		BRANCH=\"wip/fire/$USER-$(date +%s)\"; \
		git go $BRANCH && \
		git stage -A && \
		git commit -m \"WIP: fire alarm!\" && \
		git push origin "$BRANCH"; \
	};f"

	# Updates the current branch by rebasing it onto the specified branch.
	#
	# Usage:
	#   git update-branch [branch]
	#   git update-branch [remote] [branch]
	#
	# Parameters:
	#   [branch] - (Optional) The name of the branch to rebase onto. Defaults to the remote's default branch if not provided.
	#   [remote] - (Optional) The name of the remote repository. Defaults to 'origin' if not provided.
	#
	# Example:
	#   `git update-branch origin main` - Fetches and rebases the current branch onto the 'main' branch from the 'origin' remote.
	#   `git update-branch main` - Fetches and rebases the current branch onto the 'main' branch locally.
	update-branch = "!f() { \
		if [ $# -le 1 ]; then \
			REMOTE=origin; \
			BRANCH=${1:-$(git remote show $REMOTE | grep 'HEAD branch' | awk '{print $NF}')}; \
		else \
			REMOTE=$1; \
			BRANCH=$2; \
		fi; \
		git fetch $REMOTE $BRANCH && git rebase $REMOTE/$BRANCH; \
	}; f"

	# Deletes all branches that have already been merged with the main branch.
	#
	# Usage:
	#   git dm [remote] [branch]
	#   git dm [branch]
	#
	# Parameters:
	#   [remote] - (Optional) The name of the remote repository. If not provided, defaults to the local repository.
	#   [branch] - (Optional) The name of the branch on the remote or local repository to check for merged branches.
	#
	# Example:
	#   `git dm origin main` - This will delete all branches that have already been merged with the 'main' branch on the 'origin' remote.
	dm = "!f() { \
		REMOTE=${1:-origin}; \
		BRANCH=${2:-main}; \
		git fetch $REMOTE && \
		git branch --merged | \
		grep -v '^\\*\\| $BRANCH$' | \
		xargs -n 1 git branch -d; \
	}; f"

	# Switch to a branch, creating it if necessary. If no branch is specified, switch back to the previous branch.
	#
	# Usage:
	#   git go [branch-name]
	#
	# Parameters:
	#   [branch-name] - (Optional) The name of the branch to switch to. If not provided, switch back to the previous branch.
	#
	# Example:
	#  `git go` will switch back to the previous branch (same as `git go -`).
	#  `git go my-new-branch` will create a new branch called my-new-branch and switch to it.
	#  `git go main` will switch to the main branch.
	go = "!f() { \
		BRANCH=${1:-\"-\"}; \
		git branch --list $BRANCH > /dev/null 2>&1 \
			&& git switch $BRANCH 2>/dev/null \
		|| git switch -c $BRANCH; \
	}; f"

	# TODO 
	# -------------------
	# # Undo the last rebase
	# undo-rebase = "!f() { : git reset ; PREV_COMMIT=`git x-rev-before-rebase` && git reset --merge \"$PREV_COMMIT\" \"$@\";}; f"

	# # See what changed since the last rebase
	# rdiff = "!f() { : git diff ; git diff `git x-rev-before-rebase` "$@";}; f"
	# # Helpers
	# ########
	# # Get the revision before the last rebase started
	# x-rev-before-rebase = !git reflog --skip=1 -1 \"`git x-start-of-rebase`\" --format=\"%gD\"
	# # Get the revision that started the rebase
	# x-start-of-rebase = reflog --grep-reflog '^rebase (start)' -1 --format="%gD"
[user]
	name = Andreas Voigt
	email = voigtan@users.noreply.github.com
	signingkey = 1E62EB9A74CF9C3A
[color]
	ui = true
	branch = auto
	diff = auto
	interactive = auto
	status = auto
[commit]
	gpgSign = true
[gpg]
	program = gpg
[branch]
	autosetupmerge = always
	sort = -committerdate
[merge]
	tool = code
[diff]
	tool = code
[mergetool "code"]
	cmd = code --wait $MERGED
[difftool "code"]
	cmd = code --wait --diff $LOCAL $REMOTE
[mergetool "code-insiders"]
	cmd = code-insiders --wait $MERGED
[difftool "code-insiders"]
	cmd = code-insiders --wait --diff $LOCAL $REMOTE
[tag]
	forceSignAnnotated = true
[core]
	excludesFile = ~/.dotfiles/.gitignore
	editor = code --wait
[pull]
	rebase = true
	default = current
[rebase]
	autoStash = true
	missingCommitsCheck = warn
[mergetool]
	keepBackup = false
[help]
	# Automatically correct and execute mistyped commands.
	autocorrect = 1
[init]
	defaultBranch = main
[push]
	autoSetupRemote = true
	default = current
[include]
	path = ~/.gitconfig.local
[url "git@github.com:"]
	insteadOf = "gh:"
[url "git@github.com:voigtan/"]
	insteadOf = "voigtan:"
